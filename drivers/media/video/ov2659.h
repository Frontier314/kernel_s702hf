/*
 * Copyright (c) 2008 NVIDIA Corporation.  All rights reserved.
 * 
 * NVIDIA Corporation and its licensors retain all intellectual property
 * and proprietary rights in and to this software and related documentation
 * and any modifications thereto.  Any use, reproduction, disclosure or
 * distribution of this software and related documentation without an express
 * license agreement from NVIDIA Corporation is strictly prohibited.
 */

#ifndef YUV_SENSOR_OV2659_TAB_H
#define YUV_SENSOR_OV2659_TAB_H
#if defined(__cplusplus)
extern "C"
{
#endif

#include <linux/init.h>
#include <linux/module.h>
#include <linux/i2c.h>
#include <linux/slab.h>
#include <linux/delay.h>
#include <media/v4l2-chip-ident.h>
#include <media/soc_camera.h>
#include <linux/gpio.h>
#include <plat/gpio-cfg.h>
#include <mach/gpio-exynos4.h>
#include <linux/regulator/consumer.h>

#define OV2659_DRIVER_NAME	"OV2659"

//ov2655 start
unsigned int init_data[][2] = 
{
    {0x0103,0x01},
    {0x3000,0x0f},
    {0x3001,0xff},
    {0x3002,0xff},
    {0x0100,0x01},
    {0x3633,0x3d},
    {0x3620,0x02},
    {0x3631,0x11},
    {0x3612,0x04},
    {0x3630,0x20},
    {0x4702,0x02},
    {0x370c,0x34},
    {0x3004,0x10},
    {0x3005,0x18},
    {0x3800,0x00},
    {0x3801,0x00},
    {0x3802,0x00},
    {0x3803,0x00},
    {0x3804,0x06},
    {0x3805,0x5f},
    {0x3806,0x04},
    {0x3807,0xb7},
    {0x3808,0x03},
    {0x3809,0x20},
    {0x380a,0x02},
    {0x380b,0x58},
    {0x380c,0x05},
    {0x380d,0x14},
    {0x380e,0x02},
    {0x380f,0x68},
    {0x3811,0x08},
    {0x3813,0x02},
    {0x3814,0x31},
    {0x3815,0x31},
    {0x3a02,0x02},
    {0x3a03,0x68},
    {0x3a08,0x00},
    {0x3a09,0x5c},
    {0x3a0a,0x00},
    {0x3a0b,0x4d},
    {0x3a0d,0x08},
    {0x3a0e,0x06},
    {0x3a14,0x02},
    {0x3a15,0x28},
    {0x3623,0x00},
    {0x3634,0x76},
    {0x3701,0x44},
    {0x3702,0x18},
    {0x3703,0x24},
    {0x3704,0x24},
    {0x3705,0x0c},
#if 0
    {0x3820,0x87},
    {0x3821,0x07},
#else
	{0x3820,0x81},
	{0x3821,0x01},

#endif
    {0x370a,0x52},
    {0x4608,0x00},
    {0x4609,0x80},
    {0x4300,0x32},
    {0x5086,0x02},
    {0x5000,0xfb},
    {0x5001,0x1f},
    {0x5002,0x00},
    {0x5025,0x0e},
    {0x5026,0x18},
    {0x5027,0x34},
    {0x5028,0x4c},
    {0x5029,0x62},
    {0x502a,0x74},
    {0x502b,0x85},
    {0x502c,0x92},
    {0x502d,0x9e},
    {0x502e,0xb2},
    {0x502f,0xc0},
    {0x5030,0xcc},
    {0x5031,0xe0},
    {0x5032,0xee},
    {0x5033,0xf6},
    {0x5034,0x11},
    
    {0x5070,0x1c},
    {0x5071,0x5b},
    {0x5072,0x05},
    
    {0x5073,0x20},
    {0x5074,0x94},
    {0x5075,0xb4},
    
    {0x5076,0xb4},
    {0x5077,0xaf},
    {0x5078,0x05},
    
    {0x5079,0x98},
    {0x507a,0x21},
    
    {0x5035,0x6a},
    {0x5036,0x11},
    {0x5037,0x92},
    {0x5038,0x21},
    {0x5039,0xe1},
    {0x503a,0x01},
    {0x503c,0x05},
    {0x503d,0x08},
    {0x503e,0x08},
    {0x503f,0x64},
    {0x5040,0x58},
    {0x5041,0x2a},
    {0x5042,0xc5},
    {0x5043,0x2e},
    {0x5044,0x3a},
    {0x5045,0x3c},
    {0x5046,0x44},
    {0x5047,0xf8},
    {0x5048,0x08},
    {0x5049,0x70},
    {0x504a,0xf0},
    {0x504b,0xf0},
    {0x500c,0x03},
    {0x500d,0x20},
    {0x500e,0x02},
    {0x500f,0x5c},
    {0x5010,0x48},
    {0x5011,0x00},
    {0x5012,0x66},
    {0x5013,0x03},
    {0x5014,0x30},
    {0x5015,0x02},
    {0x5016,0x7c},
    {0x5017,0x40},
    {0x5018,0x00},
    {0x5019,0x66},
    {0x501a,0x03},
    {0x501b,0x10},
    {0x501c,0x02},
    {0x501d,0x7c},
    {0x501e,0x3a},
    {0x501f,0x00},
    {0x5020,0x66},
    {0x506e,0x44},
    {0x5064,0x08},
    {0x5065,0x10},
    {0x5066,0x12},
    {0x5067,0x02},
    {0x506c,0x08},
    {0x506d,0x10},
    {0x506f,0xa6},
    {0x5068,0x08},
    {0x5069,0x10},
    {0x506a,0x04},
    {0x506b,0x12},
    {0x507e,0x40},
    {0x507f,0x10},
    {0x507b,0x02},
    {0x507a,0x01},
    {0x5084,0x0c},
    {0x5085,0x3e},
    {0x5005,0x80},
    {0x3a0f,0x38},
    {0x3a10,0x30},
    {0x3a1b,0x3a},
    {0x3a1e,0x2e},
    {0x3a11,0x60},
    {0x3a1f,0x14},
    {0x5060,0x69},
    {0x5061,0x7d},
    {0x5062,0x7d},
    {0x5063,0x69},
    {0x3004,0x10},

    {0x3a00,0x38},

     //IQ
    {0x5000,0xFB},
    
    {0x500C,0x03},
    {0x500D,0x48},
    {0x500E,0x01},
    {0x500F,0xF7},
    {0x5010,0x6C},//suna modify for color shading
    {0x5011,0x00},
    {0x5012,0x06},
    
    {0x5013,0x03},
    {0x5014,0x4B},
    {0x5015,0x01},
    {0x5016,0xFB},
    {0x5017,0x6B},
    {0x5018,0x00},
    {0x5019,0x06},
    
    {0x501A,0x03},
    {0x501B,0x47},
    {0x501C,0x01},
    {0x501D,0xFB},
    {0x501E,0x68},
    {0x501F,0x00},
    {0x5020,0x06},
    
    //;;gamma
    {0x5025,0x08},
    {0x5026,0x16},
    {0x5027,0x2f},
    {0x5028,0x45},
    {0x5029,0x55},
    {0x502a,0x65},
    {0x502b,0x70},
    {0x502c,0x7c},
    {0x502d,0x86},
    {0x502e,0x96},
    {0x502f,0xa3},
    {0x5030,0xaf},
    {0x5031,0xc4},
    {0x5032,0xd7},
    {0x5033,0xe8},
    {0x5034,0x20},
    
    //;;awb
    {0x5035,0xfa}, 
    {0x5036,0x11}, 
    {0x5037,0x92}, 
    {0x5038,0x21}, 
    {0x5039,0xe1}, 
    {0x503a,0x1 },
    {0x503c,0x10}, 
    {0x503d,0x10}, 
    {0x503e,0x12}, 
    {0x503f,0x6b},  
    {0x5040,0x5e},  
    {0x5041,0x8a},  
    {0x5042,0x81},  
    {0x5043,0x28},  
    {0x5044,0x31},  
    {0x5045,0x38},  
    {0x5046,0x3f},  
    {0x5047,0xf8},  
    {0x5048,0x8 }, 
    {0x5049,0x70},  
    {0x504a,0xf0},  
    {0x504b,0xf0},  
    
    
    {0x5070,0x1c},
    {0x5071,0x5b},
    {0x5072,0x05},
    
    {0x5073,0x23},
    {0x5074,0xA2},
    {0x5075,0xC6},
    
    {0x5076,0xC6},
    {0x5077,0xC0},
    {0x5078,0x05},
    
    {0x5079,0x98},
    {0x507a,0x21},

    {0x3503,0x00},
    {0x3a18,0x00},
    {0x3a19,0x3f},

    {0x4003,0x81},

    {0x3a0f,0x38},
    {0x3a10,0x30},
    {0x3a1b,0x38},
    {0x3a1e,0x30},
    {0x3a11,0x60},
    {0x3a1f,0x18},

    //LCC 0730
    
    {0x500C,0x03},
    {0x500D,0x43}, 
    {0x500E,0x02},
    {0x500F,0x80}, 
    {0x5010,0x6B}, 
    {0x5011,0x00},
    {0x5012,0x06},
    
    {0x5013,0x03},
    {0x5014,0x42}, 
    {0x5015,0x02},
    {0x5016,0x82}, 
    {0x5017,0x5F}, 
    {0x5018,0x00},
    {0x5019,0x06},
    
    {0x501A,0x03},
    {0x501B,0x40}, 
    {0x501C,0x02},
    {0x501D,0x89}, 
    {0x501E,0x51}, 
    {0x501F,0x00},
    {0x5020,0x06},

    //;;MATRIX 110
    {0x5070,0x1c},
    {0x5071,0x5b},
    {0x5072,0x05},
    
    {0x5073,0x1f},
    {0x5074,0x91},
    {0x5075,0xb2},
    
    {0x5076,0xb2},
    {0x5077,0xac},
    {0x5078,0x04},
    
    {0x5079,0x98},
    {0x507a,0x21},

    {0x5070,0x1c},
    {0x5071,0x5b},
    {0x5072,0x05},
    
    {0x5073,0x22},
    {0x5074,0x9f},
    {0x5075,0xc3},
    
    {0x5076,0xc3},
    {0x5077,0xbd},
    {0x5078,0x04},
    
    {0x5079,0x98},
    {0x507a,0x21},
       
};

unsigned int init_vga[][2] = //res size is 800*600
{
    {0x3800,0x00},
    {0x3801,0x00},
    {0x3802,0x00},
    {0x3803,0x00},
    {0x3804,0x06},
    {0x3805,0x5f},
    {0x3806,0x04},
    {0x3807,0xb7},
    {0x3808,0x03},
    {0x3809,0x20},
    {0x380a,0x02},
    {0x380b,0x58},
    {0x380c,0x05},
    {0x380d,0x14},
    {0x380e,0x02},
    {0x380f,0x68},
    {0x3811,0x08},
    {0x3813,0x02},
    {0x3814,0x31},
    {0x3815,0x31},
                
    {0x3a02,0x02},
    {0x3a03,0x68},
    {0x3a08,0x00},
    {0x3a09,0x5c},
    {0x3a0a,0x00},
    {0x3a0b,0x4d},
    {0x3a0d,0x08},
    {0x3a0e,0x06},
                
    {0x3a14,0x02},
    {0x3a15,0x28},
                
    {0x3623,0x00},
    {0x3634,0x76},
                
    {0x3701,0x44},
    {0x3702,0x18},
    {0x3703,0x24},
    {0x3704,0x24},
    {0x3705,0x0c},
                
#if 0
	{0x3820,0x87},
	{0x3821,0x07},
#else
	{0x3820,0x81},
	{0x3821,0x01},
	
#endif

                
    {0x370a,0x52},
                
    {0x4608,0x00},
    {0x4609,0x80},
    {0x4300,0x32},
    {0x5086,0x02},
                
    {0x5000,0xfb},
    {0x5001,0x1f},
    {0x5002,0x00},

    {0x3503,0x00},
    {0x3500,0x00},
    {0x3501,0x22},
    {0x3502,0x80},
    {0x350a,0x00},
    {0x350b,0x10},
};

unsigned int init_uxga[][2] = //1600*1200
{
    {0x3800,0x00},
    {0x3801,0x00},
    {0x3802,0x00},
    {0x3803,0x00},
    {0x3804,0x06},
    {0x3805,0x5f},
    {0x3806,0x04},
    {0x3807,0xbb},
    {0x3808,0x06},
    {0x3809,0x40},
    {0x380a,0x04},
    {0x380b,0xb0},
    {0x380c,0x07},
    {0x380d,0x9f},
    {0x380e,0x04},
    {0x380f,0xd0},
    {0x3811,0x10},
    {0x3813,0x06},
    {0x3814,0x11},
    {0x3815,0x11},
    {0x3a02,0x04},
    {0x3a03,0xd0},
    {0x3a08,0x00},
    {0x3a09,0xb8},
    {0x3a0a,0x00},
    {0x3a0b,0x9a},
    {0x3a0d,0x08},
    {0x3a0e,0x06},
    {0x3a14,0x04},
    {0x3a15,0x50},
    {0x3623,0x00},
    {0x3634,0x44},
    {0x3701,0x44},
    {0x3702,0x30},
    {0x3703,0x48},
    {0x3704,0x48},
    {0x3705,0x18},
#if 0
    {0x3820,0x86},
    {0x3821,0x06},
#else
	{0x3820,0x80},
	{0x3821,0x00},

#endif
    {0x370a,0x12},
    {0x4608,0x00},
    {0x4609,0x80},
    {0x4300,0x32},
    {0x5086,0x02},
    {0x5000,0xfb},
    {0x5001,0x1f},
    {0x5002,0x00},
    {0x5005,0x80},
    {0x3004,0x10},
    {0x3005,0x18},
    {0x3503,0x03},
    {0x3a18,0x00},
    {0x3a19,0x3f},
};

unsigned int init_720p[][2] =//1280*720
{
    {0x3800,0x00},
    {0x3801,0xa0},
    {0x3802,0x00},
    {0x3803,0xf0},
    {0x3804,0x06},
    {0x3805,0x5f},
    {0x3806,0x04},
    {0x3807,0xbb},
    {0x3808,0x05},
    {0x3809,0x00},
    {0x380a,0x02},
    {0x380b,0xd0},
    {0x380c,0x07},
    {0x380d,0x9f},
    {0x380e,0x04},
    {0x380f,0xd0},
    
    {0x3810,0x00},
    {0x3811,0x10},
    
    {0x3812,0x00},
    {0x3813,0x06},
    
    {0x3814,0x11},
    {0x3815,0x11},
    {0x5002,0x00},

};

unsigned int init_wvga[][2] = //800*480
{
    {0x3800,0x00}, 
    {0x3801,0x00}, 
    {0x3802,0x00}, 
    {0x3803,0x00}, 
    {0x3804,0x06}, 
    {0x3805,0x5f}, 
    {0x3806,0x04}, 
    {0x3807,0xb7}, 
    {0x3808,0x03}, 
    {0x3809,0x20}, 
    {0x380a,0x01}, 
    {0x380b,0xe0}, 
    {0x380c,0x05}, 
    {0x380d,0x14}, 
    {0x380e,0x02}, 
    {0x380f,0x68}, 
    {0x3811,0x08}, 
    {0x3813,0x32}, 
    {0x3814,0x31}, 
    {0x3815,0x31}, 
    {0x5002,0x10}, 
};


#define V4L2_IDENT_OV2659 8245

#define MT9P111_REV3
#define FULLINISUPPORT

/* #defines for register writes and register array processing */
#define MISENSOR_8BIT		1
#define MISENSOR_16BIT		2
#define MISENSOR_32BIT		4

#define MISENSOR_FWBURST0	0x80
#define MISENSOR_FWBURST1	0x81
#define MISENSOR_FWBURST4	0x84
#define MISENSOR_FWBURST	0x88

#define MISENSOR_TOK_TERM	0xf000	/* terminating token for reg list */
#define MISENSOR_TOK_DELAY	0xfe00	/* delay token for reg list */
#define MISENSOR_TOK_FWLOAD	0xfd00	/* token indicating load FW */
#define MISENSOR_TOK_POLL	0xfc00	/* token indicating poll instruction */
#define MISENSOR_TOK_RMW	0x0010  /* RMW operation */
#define MISENSOR_TOK_MASK	0xfff0
#define MISENSOR_FLIP_EN	(1<<1)	/* enable vert_flip */
#define MISENSOR_MIRROR_EN	(1<<0)	/* enable horz_mirror */

/* mask to set sensor read_mode via misensor_rmw_reg */
#define MISENSOR_R_MODE_MASK	0x0330
/* mask to set sensor vert_flip and horz_mirror */
#define MISENSOR_F_M_MASK	0x0003

/* bits set to set sensor read_mode via misensor_rmw_reg */
#define MISENSOR_SKIPPING_SET	0x0011
#define MISENSOR_SUMMING_SET	0x0033
#define MISENSOR_NORMAL_SET	0x0000

/* bits set to set sensor vert_flip and horz_mirror */
#define MISENSOR_F_M_EN	(MISENSOR_FLIP_EN | MISENSOR_MIRROR_EN)
#define MISENSOR_F_EN		MISENSOR_FLIP_EN
#define MISENSOR_F_M_DIS	(MISENSOR_FLIP_EN & MISENSOR_MIRROR_EN)

/* sensor register that control sensor read-mode and mirror */
#define MISENSOR_READ_MODE	0xC834

#define SENSOR_DETECTED		1
#define SENSOR_NOT_DETECTED	0

#define I2C_RETRY_COUNT		5
#define MSG_LEN_OFFSET		2
#define MAX_FMTS		1

#ifndef MIPI_CONTROL
#define MIPI_CONTROL		0x3400	/* MIPI_Control */
#endif

/* GPIO pin on Moorestown */
#define GPIO_SCLK_25		44
#define GPIO_STB_PIN		47

#define GPIO_STDBY_PIN		49   /* ab:new */
#define GPIO_RESET_PIN		50

/* System control register for Aptina A-1040SOC*/
#define OV2659_PID		0x0

/* MT9P111_DEVICE_ID */
#define OV2659_MOD_ID		0x2481

/* ulBPat; */

#define OV2659_BPAT_RGRGGBGB	(1 << 0)
#define OV2659_BPAT_GRGRBGBG	(1 << 1)
#define OV2659_BPAT_GBGBRGRG	(1 << 2)
#define OV2659_BPAT_BGBGGRGR	(1 << 3)

#define OV2659_FOCAL_LENGTH_NUM	208	/*2.08mm*/
#define OV2659_FOCAL_LENGTH_DEM	100
#define OV2659_F_NUMBER_DEFAULT_NUM	24
#define OV2659_F_NUMBER_DEM	10
#define OV2659_WAIT_STAT_TIMEOUT	100
#define OV2659_FLICKER_MODE_50HZ	1
#define OV2659_FLICKER_MODE_60HZ	2
/*
 * focal length bits definition:
 * bits 31-16: numerator, bits 15-0: denominator
 */
#define OV2659_FOCAL_LENGTH_DEFAULT 0xD00064

/*
 * current f-number bits definition:
 * bits 31-16: numerator, bits 15-0: denominator
 */
#define OV2659_F_NUMBER_DEFAULT 0x18000a

/*
 * f-number range bits definition:
 * bits 31-24: max f-number numerator
 * bits 23-16: max f-number denominator
 * bits 15-8: min f-number numerator
 * bits 7-0: min f-number denominator
 */
#define OV2659_F_NUMBER_RANGE 0x180a180a

/* Supported resolutions */
enum {
	OV2659_RES_QVGA,
	OV2659_RES_VGA,
	OV2659_RES_WVGA,
	OV2659_RES_UXGA,
	OV2659_RES_720P,
	OV2659_RES_960P,
};
#define OV2659_RES_960P_SIZE_H		1280
#define OV2659_RES_960P_SIZE_V		960
#define OV2659_RES_720P_SIZE_H		1280
#define OV2659_RES_720P_SIZE_V		720
#define OV2659_RES_UXGA_SIZE_H		1600
#define OV2659_RES_UXGA_SIZE_V		1200
#define OV2659_RES_VGA_SIZE_H		640
#define OV2659_RES_VGA_SIZE_V		480
#define OV2659_RES_QVGA_SIZE_H		320
#define OV2659_RES_QVGA_SIZE_V		240

/*
 * struct misensor_reg - MI sensor  register format
 * @length: length of the register
 * @reg: 16-bit offset to register
 * @val: 8/16/32-bit register value
 * Define a structure for sensor register initialization values
 */
struct misensor_reg {
	u32 length;
	u32 reg;
	u32 val;	/* value or for read/mod/write, AND mask */
	u32 val2;	/* optional; for rmw, OR mask */
};

/*
 * struct misensor_fwreg - Firmware burst command
 * @type: FW burst or 8/16 bit register
 * @addr: 16-bit offset to register or other values depending on type
 * @valx: data value for burst (or other commands)
 *
 * Define a structure for sensor register initialization values
 */
struct misensor_fwreg {
	u32	type;	/* type of value, register or FW burst string */
	u32	addr;	/* target address */
	u32	val0;
	u32	val1;
	u32	val2;
	u32	val3;
	u32	val4;
	u32	val5;
	u32	val6;
	u32	val7;
};

struct regval_list {
	u16 reg_num;
	u8 value;
};

struct ov2659_device {
	struct v4l2_subdev sd;
	struct media_pad pad;
	struct v4l2_pix_format pix;
	struct v4l2_mbus_framefmt format;

	struct camera_sensor_platform_data *platform_data;
	int framesize_index;
	int fmt_idx;
	int real_model_id;
	int nctx;
	int power;

	/*save parameters*/
	unsigned int saturation;
	unsigned int white_balance;
	unsigned int color_effect;
	unsigned int exposure;
	unsigned int contrast;
	unsigned int sharpness;
	unsigned int brightness;
	unsigned int anti_banding;
	
	unsigned int bus_width;
	unsigned int mode;
	unsigned int field_inv;
	unsigned int field_sel;
	unsigned int ycseq;
	unsigned int conv422;
	unsigned int bpat;
	unsigned int hpol;
	unsigned int vpol;
	unsigned int edge;
	unsigned int bls;
	unsigned int gamma;
	unsigned int cconv;
	unsigned int res;
	unsigned int dwn_sz;
	unsigned int blc;
	unsigned int agc;
	unsigned int awb;
	unsigned int aec;
	/* extention SENSOR version 2 */
	unsigned int cie_profile;

	/* extention SENSOR version 3 */
	unsigned int flicker_freq;

	/* extension SENSOR version 4 */
	unsigned int smia_mode;
	unsigned int mipi_mode;

	/* Add name here to load shared library */
	unsigned int type;

	/*Number of MIPI lanes*/
	unsigned int mipi_lanes;
	char name[32];

	u8 lightfreq;
};

struct ov2659_format_struct {
	u8 *desc;
	u32 pixelformat;
	struct regval_list *regs;
};

struct ov2659_res_struct {
	u8 *desc;
	int res;
	int width;
	int height;
	int fps;
	bool used;
	struct regval_list *regs;
};

struct ov2659_control {
	struct v4l2_queryctrl qc;
	int (*query)(struct v4l2_subdev *sd, s32 *value);
	int (*tweak)(struct v4l2_subdev *sd, int value);
};

#define OV2659_MAX_WRITE_BUF_SIZE 	128	
struct ov2659_write_buffer {
	u16 addr;
	u8 data[OV2659_MAX_WRITE_BUF_SIZE];
};

struct ov2659_write_ctrl {
	int index;
	struct ov2659_write_buffer buffer;
};

/*
static struct ov2659_format_struct  ov2659_formats[] = {
	{
		.desc = "YUYV 4:2:2",
	},
};
*/

#define N_OV2659_FMTS ARRAY_SIZE(ov2659_formats)

/*
 * Modes supported by the ov2659 driver.
 * Please, keep them in ascending order.
 */
static struct ov2659_res_struct ov2659_res[] = {
	{
	.desc	= "QVGA",
	.res	= OV2659_RES_QVGA,
	.width	= 320,
	.height	= 240,
	.fps	= 30,
	.used	= 0,
	.regs	= NULL,
	},
	{
	.desc	= "VGA",
	.res	= OV2659_RES_VGA,
	.width	= 640,
	.height	= 480,
	.fps	= 30,
	.used	= 0,
	.regs	= NULL,
	},
	{
	.desc	= "720p",
	.res	= OV2659_RES_720P,
	.width	= 1280,
	.height	= 720,
	.fps	= 30,
	.used	= 0,
	.regs	= NULL,
	},
	{
	.desc	= "960P",
	.res	= OV2659_RES_960P,
	.width	= 1280,
	.height	= 960,
	.fps	= 15,
	.used	= 0,
	.regs	= NULL,
	},
};

#define N_RES (ARRAY_SIZE(ov2659_res))

static const struct i2c_device_id ov2659_id[] = {
	{ OV2659_DRIVER_NAME, 0 },
	{ },
};

#endif  //SENSOR_YUV_H
